(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{217:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return s}));var n=a(1),o=a(10),r=(a(0),a(249)),l={},i={id:"generated-config/base-resolvers-visitor",title:"base-resolvers-visitor",description:"### addUnderscoreToArgsType (`boolean`)",source:"@site/docs/generated-config/base-resolvers-visitor.md",permalink:"/docs/generated-config/base-resolvers-visitor",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/generated-config/base-resolvers-visitor.md"},p=[{value:"addUnderscoreToArgsType (<code>boolean</code>)",id:"addunderscoretoargstype-boolean",children:[]},{value:"contextType (<code>string</code>)",id:"contexttype-string",children:[]},{value:"fieldContextTypes (<code>string array</code>)",id:"fieldcontexttypes-string-array",children:[]},{value:"rootValueType (<code>string</code>)",id:"rootvaluetype-string",children:[]},{value:"mapperTypeSuffix (<code>string</code>)",id:"mappertypesuffix-string",children:[]},{value:"mappers (<code>Object</code>)",id:"mappers-object",children:[]},{value:"defaultMapper (<code>string</code>)",id:"defaultmapper-string",children:[]},{value:"avoidOptionals (<code>boolean</code>, default value: <code>false</code>)",id:"avoidoptionals-boolean-default-value-false",children:[]},{value:"showUnusedMappers (<code>boolean</code>, default value: <code>true</code>)",id:"showunusedmappers-boolean-default-value-true",children:[]},{value:"enumValues (<code>EnumValuesMap</code>)",id:"enumvalues-enumvaluesmap",children:[]},{value:"resolverTypeWrapperSignature (<code>string</code>, default value: <code>Promise | T</code>)",id:"resolvertypewrappersignature-string-default-value-promise--t",children:[]},{value:"federation (<code>boolean</code>, default value: <code>false</code>)",id:"federation-boolean-default-value-false",children:[]},{value:"enumPrefix (<code>boolean</code>, default value: <code>true</code>)",id:"enumprefix-boolean-default-value-true",children:[]},{value:"optionalResolveType (<code>boolean</code>, default value: <code>false</code>)",id:"optionalresolvetype-boolean-default-value-false",children:[]},{value:"immutableTypes (<code>boolean</code>, default value: <code>false</code>)",id:"immutabletypes-boolean-default-value-false",children:[]}],c={rightToc:p};function s(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h3",{id:"addunderscoretoargstype-boolean"},"addUnderscoreToArgsType (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),")"),Object(r.b)("p",null,"Adds ",Object(r.b)("inlineCode",{parentName:"p"},"_")," to generated ",Object(r.b)("inlineCode",{parentName:"p"},"Args")," types in order to avoid duplicate identifiers."),Object(r.b)("h4",{id:"usage-example-with-custom-values"},"Usage Example: With Custom Values"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"  config:\n    addUnderscoreToArgsType: true\n")),Object(r.b)("h3",{id:"contexttype-string"},"contextType (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",null,"Use this configuration to set a custom type for your ",Object(r.b)("inlineCode",{parentName:"p"},"context"),", and it will effect all the resolvers, without the need to override it using generics each time. If you wish to use an external type and import it from another file, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"add")," plugin and add the required ",Object(r.b)("inlineCode",{parentName:"p"},"import")," statement, or you can use a ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," syntax."),Object(r.b)("h4",{id:"usage-example-custom-context-type"},"Usage Example: Custom Context Type"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    contextType: MyContext\n")),Object(r.b)("h4",{id:"usage-example-custom-context-type-1"},"Usage Example: Custom Context Type"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    contextType: ./my-types#MyContext\n")),Object(r.b)("h3",{id:"fieldcontexttypes-string-array"},"fieldContextTypes (",Object(r.b)("inlineCode",{parentName:"h3"},"string array"),")"),Object(r.b)("p",null,"Use this to set a custom type for a specific field ",Object(r.b)("inlineCode",{parentName:"p"},"context"),". It will only affect the targeted resolvers. You can either use ",Object(r.b)("inlineCode",{parentName:"p"},"Field.Path#ContextTypeName")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Field.Path#ExternalFileName#ContextTypeName")),Object(r.b)("h4",{id:"usage-example-custom-field-context-types"},"Usage Example: Custom Field Context Types"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"plugins\n  config:\n    fieldContextTypes:\n      - MyType.foo#CustomContextType\n      - MyType.bar#./my-file#ContextTypeOne\n")),Object(r.b)("h3",{id:"rootvaluetype-string"},"rootValueType (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",null,"Use this configuration to set a custom type for the ",Object(r.b)("inlineCode",{parentName:"p"},"rootValue"),", and it will effect resolvers of all root types (Query, Mutation and Subscription), without the need to override it using generics each time. If you wish to use an external type and import it from another file, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"add")," plugin and add the required ",Object(r.b)("inlineCode",{parentName:"p"},"import")," statement, or you can use both ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," or ",Object(r.b)("inlineCode",{parentName:"p"},"module#namespace#type")," syntax."),Object(r.b)("h4",{id:"usage-example-custom-rootvalue-type"},"Usage Example: Custom RootValue Type"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    rootValueType: MyRootValue\n")),Object(r.b)("h4",{id:"usage-example-custom-rootvalue-type-1"},"Usage Example: Custom RootValue Type"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    rootValueType: ./my-types#MyRootValue\n")),Object(r.b)("h3",{id:"mappertypesuffix-string"},"mapperTypeSuffix (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",null,"Adds a suffix to the imported names to prevent name clashes."),Object(r.b)("h3",{id:"mappers-object"},"mappers (",Object(r.b)("inlineCode",{parentName:"h3"},"Object"),")"),Object(r.b)("p",null,"Replaces a GraphQL type usage with a custom type, allowing you to return custom object from your resolvers. You can use both ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"module#namespace#type")," syntax."),Object(r.b)("h4",{id:"usage-example-custom-context-type-2"},"Usage Example: Custom Context Type"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    mappers:\n      User: ./my-models#UserDbObject\n      Book: ./my-models#Collections#Book\n")),Object(r.b)("h3",{id:"defaultmapper-string"},"defaultMapper (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",null,"Allow you to set the default mapper when it's not being override by ",Object(r.b)("inlineCode",{parentName:"p"},"mappers")," or generics. You can specify a type name, or specify a string in ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," or ",Object(r.b)("inlineCode",{parentName:"p"},"module#namespace#type")," format. The defualt value of mappers it the TypeScript type generated by ",Object(r.b)("inlineCode",{parentName:"p"},"typescript")," package."),Object(r.b)("h4",{id:"usage-example-replace-with-any"},"Usage Example: Replace with any"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    defaultMapper: any\n")),Object(r.b)("h4",{id:"usage-example-custom-base-object"},"Usage Example: Custom Base Object"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    defaultMapper: ./my-file#BaseObject\n")),Object(r.b)("h4",{id:"usage-example-wrap-default-types-with-partial"},"Usage Example: Wrap default types with Partial"),Object(r.b)("p",null,'You can also specify a custom wrapper for the original type, without overring the original generated types, use "T" to specify the identifier. (for flow, use ',Object(r.b)("inlineCode",{parentName:"p"},"$Shape<{T}>"),")"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    defaultMapper: Partial<{T}>\n")),Object(r.b)("h4",{id:"usage-example-allow-deep-partial-with-utility-types"},"Usage Example: Allow deep partial with ",Object(r.b)("inlineCode",{parentName:"h4"},"utility-types")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),'plugins\n plugins:\n   - "typescript"\n   - "typescript-resolvers"\n   - add: "import { DeepPartial } from \'utility-types\';"\n config:\n   defaultMapper: DeepPartial<{T}>\n')),Object(r.b)("h3",{id:"avoidoptionals-boolean-default-value-false"},"avoidOptionals (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",null,"This will cause the generator to avoid using TypeScript optionals (",Object(r.b)("inlineCode",{parentName:"p"},"?"),"), so all field resolvers must be implemented in order to avoid compilation errors."),Object(r.b)("h4",{id:"usage-example"},"Usage Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   avoidOptionals: true\n")),Object(r.b)("h3",{id:"showunusedmappers-boolean-default-value-true"},"showUnusedMappers (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"true"),")"),Object(r.b)("p",null,"Warns about unused mappers."),Object(r.b)("h4",{id:"usage-example-1"},"Usage Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   showUnusedMappers: true\n")),Object(r.b)("h3",{id:"enumvalues-enumvaluesmap"},"enumValues (",Object(r.b)("inlineCode",{parentName:"h3"},"EnumValuesMap"),")"),Object(r.b)("p",null,"Overrides the default value of enum values declared in your GraphQL schema, supported in this plugin because of the need for integeration with ",Object(r.b)("inlineCode",{parentName:"p"},"typescript")," package. See documentation under ",Object(r.b)("inlineCode",{parentName:"p"},"typescript")," plugin for more information and examples."),Object(r.b)("h3",{id:"resolvertypewrappersignature-string-default-value-promise--t"},"resolverTypeWrapperSignature (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"Promise | T"),")"),Object(r.b)("p",null,"Allow you to override ",Object(r.b)("inlineCode",{parentName:"p"},"resolverTypeWrapper")," definition."),Object(r.b)("h3",{id:"federation-boolean-default-value-false"},"federation (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",null,"Supports Apollo Federation"),Object(r.b)("h3",{id:"enumprefix-boolean-default-value-true"},"enumPrefix (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"true"),")"),Object(r.b)("p",null,"Allow you to disable prefixing for generated enums, works in combination with ",Object(r.b)("inlineCode",{parentName:"p"},"typesPrefix"),"."),Object(r.b)("h4",{id:"usage-example-disable-enum-prefixes"},"Usage Example: Disable enum prefixes"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"  config:\n    typesPrefix: I\n    enumPrefix: false\n")),Object(r.b)("h3",{id:"optionalresolvetype-boolean-default-value-false"},"optionalResolveType (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",null,"Sets the ",Object(r.b)("inlineCode",{parentName:"p"},"__resolveType")," field as optional field."),Object(r.b)("h3",{id:"immutabletypes-boolean-default-value-false"},"immutableTypes (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",null,"Generates immutable types by adding ",Object(r.b)("inlineCode",{parentName:"p"},"readonly")," to properties and uses ",Object(r.b)("inlineCode",{parentName:"p"},"ReadonlyArray"),"."))}s.isMDXComponent=!0},249:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=o.a.createContext({}),s=function(e){var t=o.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},u=function(e){var t=s(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(a),b=n,m=u["".concat(l,".").concat(b)]||u[b]||d[b]||r;return a?o.a.createElement(m,i({ref:t},c,{components:a})):o.a.createElement(m,i({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,l=new Array(r);l[0]=b;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var c=2;c<r;c++)l[c]=a[c];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);
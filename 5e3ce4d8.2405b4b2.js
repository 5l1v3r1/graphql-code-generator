(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{181:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return c}));var n=a(1),p=a(10),r=(a(0),a(249)),o={id:"typescript-resolvers",title:"TypeScript Resolvers"},i={id:"plugins/typescript-resolvers",title:"TypeScript Resolvers",description:"This plugin generates types for resolve functions. ",source:"@site/docs/plugins/typescript-resolvers.md",permalink:"/docs/plugins/typescript-resolvers",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-resolvers.md",sidebar:"sidebar",previous:{title:"TypeScript 1.0 Compatibility",permalink:"/docs/plugins/typescript-compatibility"},next:{title:"TypeScript GraphQL Files Modules",permalink:"/docs/plugins/typescript-graphql-files-modules"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Integration with Apollo-Server",id:"integration-with-apollo-server",children:[]},{value:"Configuration",id:"configuration",children:[]}],s={rightToc:l};function c(e){var t=e.components,a=Object(p.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This plugin generates types for resolve functions. "),Object(r.b)("p",null,"You can use this plugin as-is to generate simple resolvers signature based on your GraphQL types, or you can change it's behaviour be providing custom model types (",Object(r.b)("inlineCode",{parentName:"p"},"mappers"),")."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"$ yarn add -D @graphql-codegen/typescript-resolvers\n")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"Quick Start with ",Object(r.b)("inlineCode",{parentName:"h5"},"typescript-resovlers"))),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"You can find ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://the-guild.dev/blog/better-type-safety-for-resolvers-with-graphql-codegen"}),"a blog post we wrote about using and customizing this plugin here")))),Object(r.b)("p",null,"Run ",Object(r.b)("inlineCode",{parentName:"p"},"graphql-codegen")," as usual, with this new plugin:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"schema: schema.json\ngenerates:\n  ./src/resolvers-types.ts:\n    plugins:\n      - typescript\n      - typescript-resolvers\n")),Object(r.b)("p",null,"Import the types from the generated file and use in the resolver:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"import { Resolvers } from './resolvers-types';\n\nexport const resolvers: Resolvers = {\n  Query: {\n    myQuery: (root, args, context) => {},\n  }\n};\n")),Object(r.b)("p",null,"This will make the resolver fully typed and compatible with typescript compiler, including the handler's arguments and return value."),Object(r.b)("p",null,"Generated resolvers can be passed directly into ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/graphql-tools"}),"graphql-tools")," ",Object(r.b)("inlineCode",{parentName:"p"},"makeExecutableSchema")," function."),Object(r.b)("h2",{id:"integration-with-apollo-server"},"Integration with Apollo-Server"),Object(r.b)("p",null,"If you are using Apollo Server with TypeScript, note that you need to set ",Object(r.b)("inlineCode",{parentName:"p"},"useIndexSignature: true")," in your config, in order to add a compatible index signature (",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/dotansimha/graphql-code-generator/issues/1133#issuecomment-456812621"}),"more info"),")."),Object(r.b)("p",null,"If you wish to have an easy start, and have the ability to use resolvers chaining without models types, you can also add to your config ",Object(r.b)("inlineCode",{parentName:"p"},"defaultMapper: Partial<{T}>"),". This will allow you to return partial typse in your resolvers."),Object(r.b)("h2",{id:"configuration"},"Configuration"),Object(r.b)("p",null,Object(r.b)("h3",{parentName:"p"},"scalars (",Object(r.b)("inlineCode",{parentName:"h3"},"ScalarsMap"),")"),Object(r.b)("p",{parentName:"p"},"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),'config:\n  scalars:\n    DateTime: Date\n    JSON: "{ [key: string]: any }"\n')),Object(r.b)("h3",{parentName:"p"},"namingConvention (",Object(r.b)("inlineCode",{parentName:"h3"},"NamingConvention"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"pascal-case#pascalCase"),")"),Object(r.b)("p",{parentName:"p"},"Allow you to override the naming convention of the output. You can either override all namings, or specify an object with specific custom naming convention per output. The format of the converter must be a valid ",Object(r.b)("inlineCode",{parentName:"p"},"module#method"),". Allowed values for specific output are: ",Object(r.b)("inlineCode",{parentName:"p"},"typeNames"),", ",Object(r.b)("inlineCode",{parentName:"p"},"enumValues"),'. You can also use "keep" to keep all GraphQL names as-is. Additionally you can set ',Object(r.b)("inlineCode",{parentName:"p"},"transformUnderscore")," to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if you want to override the default behaviour, which is to preserves underscores."),Object(r.b)("h4",{parentName:"p"},"Usage Example: Override All Names"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention: lower-case#lowerCase\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Upper-case enum values"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    enumValues: upper-case#upperCase\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Keep"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention: keep\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Remove Underscores"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    transformUnderscore: true\n")),Object(r.b)("h3",{parentName:"p"},"typesPrefix (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},'""'),")"),Object(r.b)("p",{parentName:"p"},"Prefixes all the generated types."),Object(r.b)("h4",{parentName:"p"},'Usage Example: Add "I" Prefix'),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  typesPrefix: I\n")),Object(r.b)("h3",{parentName:"p"},"skipTypename (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Does not add __typename to the generated types, unless it was specified in the selection set."),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  skipTypename: true\n")),Object(r.b)("h3",{parentName:"p"},"nonOptionalTypename (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Automatically adds ",Object(r.b)("inlineCode",{parentName:"p"},"__typename")," field to the generated types, even when they are not specified in the selection set, and makes it non-optional"),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  nonOptionalTypename: true\n"))),Object(r.b)("p",null,Object(r.b)("h3",{parentName:"p"},"addUnderscoreToArgsType (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),")"),Object(r.b)("p",{parentName:"p"},"Adds ",Object(r.b)("inlineCode",{parentName:"p"},"_")," to generated ",Object(r.b)("inlineCode",{parentName:"p"},"Args")," types in order to avoid duplicate identifiers."),Object(r.b)("h4",{parentName:"p"},"Usage Example: With Custom Values"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"  config:\n    addUnderscoreToArgsType: true\n")),Object(r.b)("h3",{parentName:"p"},"contextType (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",{parentName:"p"},"Use this configuration to set a custom type for your ",Object(r.b)("inlineCode",{parentName:"p"},"context"),", and it will effect all the resolvers, without the need to override it using generics each time. If you wish to use an external type and import it from another file, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"add")," plugin and add the required ",Object(r.b)("inlineCode",{parentName:"p"},"import")," statement, or you can use a ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," syntax."),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom Context Type"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    contextType: MyContext\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom Context Type"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    contextType: ./my-types#MyContext\n")),Object(r.b)("h3",{parentName:"p"},"fieldContextTypes (",Object(r.b)("inlineCode",{parentName:"h3"},"string array"),")"),Object(r.b)("p",{parentName:"p"},"Use this to set a custom type for a specific field ",Object(r.b)("inlineCode",{parentName:"p"},"context"),". It will only affect the targeted resolvers. You can either use ",Object(r.b)("inlineCode",{parentName:"p"},"Field.Path#ContextTypeName")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Field.Path#ExternalFileName#ContextTypeName")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom Field Context Types"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"plugins\n  config:\n    fieldContextTypes:\n      - MyType.foo#CustomContextType\n      - MyType.bar#./my-file#ContextTypeOne\n")),Object(r.b)("h3",{parentName:"p"},"rootValueType (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",{parentName:"p"},"Use this configuration to set a custom type for the ",Object(r.b)("inlineCode",{parentName:"p"},"rootValue"),", and it will effect resolvers of all root types (Query, Mutation and Subscription), without the need to override it using generics each time. If you wish to use an external type and import it from another file, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"add")," plugin and add the required ",Object(r.b)("inlineCode",{parentName:"p"},"import")," statement, or you can use both ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," or ",Object(r.b)("inlineCode",{parentName:"p"},"module#namespace#type")," syntax."),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom RootValue Type"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    rootValueType: MyRootValue\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom RootValue Type"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    rootValueType: ./my-types#MyRootValue\n")),Object(r.b)("h3",{parentName:"p"},"mapperTypeSuffix (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",{parentName:"p"},"Adds a suffix to the imported names to prevent name clashes."),Object(r.b)("h3",{parentName:"p"},"mappers (",Object(r.b)("inlineCode",{parentName:"h3"},"Object"),")"),Object(r.b)("p",{parentName:"p"},"Replaces a GraphQL type usage with a custom type, allowing you to return custom object from your resolvers. You can use both ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," and ",Object(r.b)("inlineCode",{parentName:"p"},"module#namespace#type")," syntax."),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom Context Type"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    mappers:\n      User: ./my-models#UserDbObject\n      Book: ./my-models#Collections#Book\n")),Object(r.b)("h3",{parentName:"p"},"defaultMapper (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(r.b)("p",{parentName:"p"},"Allow you to set the default mapper when it's not being override by ",Object(r.b)("inlineCode",{parentName:"p"},"mappers")," or generics. You can specify a type name, or specify a string in ",Object(r.b)("inlineCode",{parentName:"p"},"module#type")," or ",Object(r.b)("inlineCode",{parentName:"p"},"module#namespace#type")," format. The defualt value of mappers it the TypeScript type generated by ",Object(r.b)("inlineCode",{parentName:"p"},"typescript")," package."),Object(r.b)("h4",{parentName:"p"},"Usage Example: Replace with any"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    defaultMapper: any\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Custom Base Object"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    defaultMapper: ./my-file#BaseObject\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Wrap default types with Partial"),Object(r.b)("p",{parentName:"p"},'You can also specify a custom wrapper for the original type, without overring the original generated types, use "T" to specify the identifier. (for flow, use ',Object(r.b)("inlineCode",{parentName:"p"},"$Shape<{T}>"),")"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"plugins\n  config:\n    defaultMapper: Partial<{T}>\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example: Allow deep partial with ",Object(r.b)("inlineCode",{parentName:"h4"},"utility-types")),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),'plugins\n plugins:\n   - "typescript"\n   - "typescript-resolvers"\n   - add: "import { DeepPartial } from \'utility-types\';"\n config:\n   defaultMapper: DeepPartial<{T}>\n')),Object(r.b)("h3",{parentName:"p"},"avoidOptionals (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"This will cause the generator to avoid using TypeScript optionals (",Object(r.b)("inlineCode",{parentName:"p"},"?"),"), so all field resolvers must be implemented in order to avoid compilation errors."),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   avoidOptionals: true\n")),Object(r.b)("h3",{parentName:"p"},"showUnusedMappers (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"true"),")"),Object(r.b)("p",{parentName:"p"},"Warns about unused mappers."),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   showUnusedMappers: true\n")),Object(r.b)("h3",{parentName:"p"},"enumValues (",Object(r.b)("inlineCode",{parentName:"h3"},"EnumValuesMap"),")"),Object(r.b)("p",{parentName:"p"},"Overrides the default value of enum values declared in your GraphQL schema, supported in this plugin because of the need for integeration with ",Object(r.b)("inlineCode",{parentName:"p"},"typescript")," package. See documentation under ",Object(r.b)("inlineCode",{parentName:"p"},"typescript")," plugin for more information and examples."),Object(r.b)("h3",{parentName:"p"},"resolverTypeWrapperSignature (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"Promise | T"),")"),Object(r.b)("p",{parentName:"p"},"Allow you to override ",Object(r.b)("inlineCode",{parentName:"p"},"resolverTypeWrapper")," definition."),Object(r.b)("h3",{parentName:"p"},"federation (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Supports Apollo Federation"),Object(r.b)("h3",{parentName:"p"},"enumPrefix (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"true"),")"),Object(r.b)("p",{parentName:"p"},"Allow you to disable prefixing for generated enums, works in combination with ",Object(r.b)("inlineCode",{parentName:"p"},"typesPrefix"),"."),Object(r.b)("h4",{parentName:"p"},"Usage Example: Disable enum prefixes"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"  config:\n    typesPrefix: I\n    enumPrefix: false\n")),Object(r.b)("h3",{parentName:"p"},"optionalResolveType (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Sets the ",Object(r.b)("inlineCode",{parentName:"p"},"__resolveType")," field as optional field."),Object(r.b)("h3",{parentName:"p"},"immutableTypes (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Generates immutable types by adding ",Object(r.b)("inlineCode",{parentName:"p"},"readonly")," to properties and uses ",Object(r.b)("inlineCode",{parentName:"p"},"ReadonlyArray"),".")),Object(r.b)("p",null,Object(r.b)("h3",{parentName:"p"},"useIndexSignature (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Adds an index signature to any generates resolver."),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   useIndexSignature: true\n")),Object(r.b)("h3",{parentName:"p"},"noSchemaStitching (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(r.b)("p",{parentName:"p"},"Disables Schema Stitching support"),Object(r.b)("blockquote",{parentName:"p"},Object(r.b)("p",{parentName:"blockquote"},"The default behavior will be reversed in the next major release. Support for Schema Stitching will be disabled by default.")),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   noSchemaStitching: true\n")),Object(r.b)("h3",{parentName:"p"},"wrapFieldDefinitions (",Object(r.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},"true"),")"),Object(r.b)("p",{parentName:"p"},"Set to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," in order to wrap field definitions with ",Object(r.b)("inlineCode",{parentName:"p"},"FieldWrapper"),". This is useful to allow return types such as Promises and functions. Needed for compatibility with ",Object(r.b)("inlineCode",{parentName:"p"},"federation: true")," when"),Object(r.b)("h4",{parentName:"p"},"Usage Example: Enable wrapping fields"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   wrapFieldDefinitions: false\n")),Object(r.b)("h3",{parentName:"p"},"customResolveInfo (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},'"graphql#GraphQLResolveInfo"'),")"),Object(r.b)("p",{parentName:"p"},"You can provide your custom GraphQLResolveInfo instead of the default one from graphql-js"),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   customResolveInfo: ./my-types#MyResolveInfo\n")),Object(r.b)("h3",{parentName:"p"},"customResolverFn (",Object(r.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(r.b)("inlineCode",{parentName:"h3"},'"(parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) = Promise | TResult"'),")"),Object(r.b)("p",{parentName:"p"},"You can provide your custom ResolveFn instead the default. It has to be a type that uses the generics TResult, TParent, TContext, TArgs"),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-resolvers\n config:\n   customResolverFn: ./my-types#MyResolveFn\n")),Object(r.b)("h4",{parentName:"p"},"Usage Example"),Object(r.b)("pre",{parentName:"p"},Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - add: \"import { GraphileHelpers } from 'graphile-utils/node8plus/fieldHelpers';\"\n   - typescript\n   - typescript-resolvers\n config:\n   customResolverFn: |\n     (\n       parent: TParent,\n       args: TArgs,\n       context: TContext,\n       info: GraphQLResolveInfo & { graphile: GraphileHelpers<TParent> }\n     ) => Promise<TResult> | TResult;\n"))))}c.isMDXComponent=!0},249:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return d}));var n=a(0),p=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,p=function(e,t){if(null==e)return{};var a,n,p={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(p[a]=e[a]);return p}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(p[a]=e[a])}return p}var s=p.a.createContext({}),c=function(e){var t=p.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},b=function(e){var t=c(e.components);return p.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return p.a.createElement(p.a.Fragment,{},t)}},u=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=c(a),u=n,d=b["".concat(o,".").concat(u)]||b[u]||m[u]||r;return a?p.a.createElement(d,i({ref:t},s,{components:a})):p.a.createElement(d,i({ref:t},s))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var s=2;s<r;s++)o[s]=a[s];return p.a.createElement.apply(null,o)}return p.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);
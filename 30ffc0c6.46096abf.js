(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{163:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(1),r=n(10),o=(n(0),n(245)),i={id:"typescript-oclif",title:"TypeScript oclif"},p={id:"plugins/typescript-oclif",title:"TypeScript oclif",description:"This plugin generates [`oclif`](https://www.npmjs.com/package/oclif) CLI commands.",source:"@site/docs/plugins/typescript-oclif.md",permalink:"/docs/plugins/typescript-oclif",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-oclif.md"},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Step 1: Generate the CLI scaffold",id:"step-1-generate-the-cli-scaffold",children:[]},{value:"Step 2: Add GraphQL Documents",id:"step-2-add-graphql-documents",children:[]},{value:"Step 3: Add &amp; Export a GraphQL Query Handler",id:"step-3-add--export-a-graphql-query-handler",children:[]},{value:"Step 4: Add &amp; Configure GraphQL Codegen",id:"step-4-add--configure-graphql-codegen",children:[]}]},{value:"Advanced Features",id:"advanced-features",children:[{value:"Descriptions &amp; Examples",id:"descriptions--examples",children:[]},{value:"Custom/Manually-maintained Commands",id:"custommanually-maintained-commands",children:[]}]},{value:"Configuration",id:"configuration",children:[]}],c={rightToc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This plugin generates ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/oclif"}),Object(o.b)("inlineCode",{parentName:"a"},"oclif"))," CLI commands."),Object(o.b)("p",null,Object(o.b)("h2",{parentName:"p"},"Requirements"),Object(o.b)("p",{parentName:"p"},"In order to use this package, please make sure that you have GraphQL operations set as ",Object(o.b)("inlineCode",{parentName:"p"},"documents: ...")," in your ",Object(o.b)("inlineCode",{parentName:"p"},"codegen.yml"),"."),Object(o.b)("p",{parentName:"p"},"Without loading your GraphQL operations (query, mutation, subscription and fragment), you won't see any change in the generated output.")),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/kalzoo/graphql-codegen-oclif-example/"}),"You can find a working example of this plugin here")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"$ yarn add @graphql-codegen/typescript @graphql-codegen/typescript-oclif\n")),Object(o.b)("p",null,"The, make sure you have ",Object(o.b)("inlineCode",{parentName:"p"},"typescript")," plugin as well in your configuration:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),'schema: http://localhost:4000\ndocuments: "src/commands/**/*.graphql"\ngenerates:\n  src/types.ts:\n    - typescript\n  src/commands/:\n    preset: near-operation-file\n    presetConfig:\n      extension: .ts\n      baseTypesPath: ../types.ts\n    plugins:\n      - typescript-oclif:\n          handlerPath: ../../handler\n')),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"With GraphQL Codegen, building a CLI tool for your GraphQL API couldn't be easier. In four steps,\nyou can have a user-friendly command-line interface:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Generate a boilerplate CLI using ",Object(o.b)("inlineCode",{parentName:"li"},"oclif")),Object(o.b)("li",{parentName:"ol"},"Add GraphQL Documents (Queries & Mutations)"),Object(o.b)("li",{parentName:"ol"},"Add and export a graphql client of your choice (",Object(o.b)("inlineCode",{parentName:"li"},"graphql-request"),", ",Object(o.b)("inlineCode",{parentName:"li"},"apollo-client"),", etc)"),Object(o.b)("li",{parentName:"ol"},"Add, configure, and run the code generator")),Object(o.b)("h3",{id:"step-1-generate-the-cli-scaffold"},"Step 1: Generate the CLI scaffold"),Object(o.b)("p",null,"You'll be starting from your projects directory. From there, generate the CLI skeleton using ",Object(o.b)("inlineCode",{parentName:"p"},"oclif"),"\nby following the steps in their ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://oclif.io/docs/introduction"}),"guide"),". You can choose either\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"single")," or ",Object(o.b)("inlineCode",{parentName:"p"},"multi")," type, and can switch later if you change your mind."),Object(o.b)("h3",{id:"step-2-add-graphql-documents"},"Step 2: Add GraphQL Documents"),Object(o.b)("p",null,"These documents are how ",Object(o.b)("inlineCode",{parentName:"p"},"oclif")," will interact with your API. For each document, there will be\nexactly one command."),Object(o.b)("p",null,"Within the directory created by the ",Object(o.b)("inlineCode",{parentName:"p"},"oclif")," tool, you'll have a subdirectory ",Object(o.b)("inlineCode",{parentName:"p"},"src/commands"),". That's\nwhere you'll put your GraphQL documents. Ie, to create a ",Object(o.b)("inlineCode",{parentName:"p"},"<cli-name> hello")," command, you'd write a\n",Object(o.b)("inlineCode",{parentName:"p"},"src/commands/hello.graphql")," document, which will be used to generate a ",Object(o.b)("inlineCode",{parentName:"p"},"src/commands/hello.ts"),"\nfile. ",Object(o.b)("strong",{parentName:"p"},"Important"),": each document should have exactly one GraphQL operation."),Object(o.b)("h3",{id:"step-3-add--export-a-graphql-query-handler"},"Step 3: Add & Export a GraphQL Query Handler"),Object(o.b)("p",null,"Which client you use, and how you configure it, is entirely up to you! It just has to conform to\nthis ",Object(o.b)("inlineCode",{parentName:"p"},"QueryHandler")," signature:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { Command } from '@oclif/command';\n\ninterface QueryHandlerProps {\n  command: Command\n  query: string;\n  variables?: Record<string, any>;\n}\n\ntype QueryHandler = (props: QueryHandlerProps) => any;\n")),Object(o.b)("p",null,"This allows you to pre-process, send, and post-process requests however you'd like, as well as format\nthe results returned. The arguments are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"command"),": the command object being executed, described ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://oclif.io/docs/commands"}),"here"),"\nin the ",Object(o.b)("inlineCode",{parentName:"li"},"oclif")," documentation."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"query"),": the string version of the GraphQL query being executed."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"variables"),": the variables as configured in your GraphQL operation and parsed by ",Object(o.b)("inlineCode",{parentName:"li"},"oclif"),".")),Object(o.b)("p",null,"You can add a ",Object(o.b)("inlineCode",{parentName:"p"},"src/handler.ts")," (or any other path), configure your handler function there, and then\nexport your handler as the ",Object(o.b)("strong",{parentName:"p"},"default export"),". It's in this module that you can handle auth logic,\nread config files, etc., and that will apply to all CLI operations. This file will not be modified\nby the codegen."),Object(o.b)("p",null,"To get started quickly and easily, consider using the simple ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-request")," as your handler:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),'// handler.ts\n\nimport { GraphQLClient } from "graphql-request";\nimport { Command } from "@oclif/command";\n\ninterface QueryHandlerProps {\n  command: Command;\n  query: string;\n  variables?: Record<string, any>;\n}\n\n// Change the URL to the endpoint your CLI will use\nconst client = new GraphQLClient("http://localhost:4000");\n\nconst handler = ({ command, query, variables }: QueryHandlerProps) => {\n  return client\n    .request(query, variables)\n    .then(command.log)\n    .catch(command.error);\n};\n\nexport default handler;\n\n')),Object(o.b)("h3",{id:"step-4-add--configure-graphql-codegen"},"Step 4: Add & Configure GraphQL Codegen"),Object(o.b)("p",null,"First, follow the GraphQL-Code-Generator guide to install it, and make sure to also install\n",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-codegen/typescript-oclif"),". Then, change your ",Object(o.b)("inlineCode",{parentName:"p"},"codegen.yml")," file to look like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'schema: <path-to-your-schema>\ndocuments: "src/commands/**/*.graphql"\ngenerates:\n  src/types.ts:\n    - typescript\n  src/commands/:\n    preset: near-operation-file\n    presetConfig:\n      extension: .ts\n      baseTypesPath: ../types.ts\n    plugins:\n      - typescript-oclif:\n          client: ../../client\n')),Object(o.b)("p",null,"Breaking that down: "),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Reading your schema allows the codegen tool to understand what types it's working with"),Object(o.b)("li",{parentName:"ul"},"The 'documents' section will collect all of your ",Object(o.b)("inlineCode",{parentName:"li"},"*.graphql")," files"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"src/types.ts")," creates the typescript types that the rest of the tool can reference"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"near-operation-file")," is a ",Object(o.b)("inlineCode",{parentName:"li"},"graphql-codegen")," preset which allows one output file per input file\n(ie, one ",Object(o.b)("inlineCode",{parentName:"li"},".ts")," module per ",Object(o.b)("inlineCode",{parentName:"li"},".graphql")," document) rather than one output file for the whole package.\nThis is ",Object(o.b)("em",{parentName:"li"},"required")," for ",Object(o.b)("inlineCode",{parentName:"li"},"oclif")," to work, since it relies on the file structure for information."),Object(o.b)("li",{parentName:"ul"},"Note: ",Object(o.b)("inlineCode",{parentName:"li"},"typescript-operations")," plugin isn't required, since this library isn't meant to be consumed\nprogrammatically (and so nothing reads the types that ",Object(o.b)("inlineCode",{parentName:"li"},"typescript-operations")," would produce)"),Object(o.b)("li",{parentName:"ul"},"The ",Object(o.b)("inlineCode",{parentName:"li"},"client")," path is to the file which has a default export of your ",Object(o.b)("inlineCode",{parentName:"li"},"graphql-request")," client,\nrelative to the generated files (ie here, ",Object(o.b)("inlineCode",{parentName:"li"},"src/commands/something/file.graphql"),").\nNote that it has no extension.")),Object(o.b)("p",null,"With that configured, just run ",Object(o.b)("inlineCode",{parentName:"p"},"yarn graphql-codegen")," or ",Object(o.b)("inlineCode",{parentName:"p"},"npx graphql-codegen")," to generate all the\nnecessary ",Object(o.b)("inlineCode",{parentName:"p"},"oclif")," command files. With that complete, follow the directions in the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://oclif.io/docs/introduction"}),"oclif guide")," to run your new CLI tool."),Object(o.b)("h2",{id:"advanced-features"},"Advanced Features"),Object(o.b)("h3",{id:"descriptions--examples"},"Descriptions & Examples"),Object(o.b)("p",null,"You can add descriptions and examples for your commands via ",Object(o.b)("inlineCode",{parentName:"p"},"typescript-oclif")," with the ",Object(o.b)("inlineCode",{parentName:"p"},"@oclif"),"\nclient-side directive, like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),'mutation CreateAuthor($name: String!)\n  @oclif(description: "Create a new author", example: "cli author:create --name Alice", example: "cli author:create --name Bob") {\n  createAuthor(input: { name: $name }) {\n    name\n  }\n}\n')),Object(o.b)("p",null,"This ",Object(o.b)("inlineCode",{parentName:"p"},"@oclif")," directive will not be sent to the server. Note that, for multiple examples, you must\nuse multiple ",Object(o.b)("inlineCode",{parentName:"p"},"example")," keys rather than an ",Object(o.b)("inlineCode",{parentName:"p"},"examples")," array. This is a ",Object(o.b)("del",{parentName:"p"},"quirk")," feature of\n",Object(o.b)("inlineCode",{parentName:"p"},"graphql"),"."),Object(o.b)("h3",{id:"custommanually-maintained-commands"},"Custom/Manually-maintained Commands"),Object(o.b)("p",null,"If you want a command that doesn't just execute a GraphQL Query or Mutation, then you can still\ncreate one manually in the same way as any other ",Object(o.b)("inlineCode",{parentName:"p"},"oclif")," application. If you wanted to add a ",Object(o.b)("inlineCode",{parentName:"p"},"fix"),"\ncommand, for example, you can just create a file at ",Object(o.b)("inlineCode",{parentName:"p"},"src/commands/fix.ts"),", follow the ",Object(o.b)("inlineCode",{parentName:"p"},"oclif")," API\n(ie, export a class with a ",Object(o.b)("inlineCode",{parentName:"p"},"run()")," method), and ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-codegen")," won't disturb that file - so long\nas you ",Object(o.b)("strong",{parentName:"p"},"don't")," ",Object(o.b)("em",{parentName:"p"},"also")," create a ",Object(o.b)("inlineCode",{parentName:"p"},"fix.graphql")," file next to it (in which case, it ",Object(o.b)("em",{parentName:"p"},"would")," overrride\n",Object(o.b)("inlineCode",{parentName:"p"},"fix.ts")," on the next run of ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-codegen"),")."),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("p",null,Object(o.b)("h3",{parentName:"p"},"scalars (",Object(o.b)("inlineCode",{parentName:"h3"},"ScalarsMap"),")"),Object(o.b)("p",{parentName:"p"},"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."),Object(o.b)("h4",{parentName:"p"},"Usage Example"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),'config:\n  scalars:\n    DateTime: Date\n    JSON: "{ [key: string]: any }"\n')),Object(o.b)("h3",{parentName:"p"},"namingConvention (",Object(o.b)("inlineCode",{parentName:"h3"},"NamingConvention"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"pascal-case#pascalCase"),")"),Object(o.b)("p",{parentName:"p"},"Allow you to override the naming convention of the output. You can either override all namings, or specify an object with specific custom naming convention per output. The format of the converter must be a valid ",Object(o.b)("inlineCode",{parentName:"p"},"module#method"),". Allowed values for specific output are: ",Object(o.b)("inlineCode",{parentName:"p"},"typeNames"),", ",Object(o.b)("inlineCode",{parentName:"p"},"enumValues"),'. You can also use "keep" to keep all GraphQL names as-is. Additionally you can set ',Object(o.b)("inlineCode",{parentName:"p"},"transformUnderscore")," to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," if you want to override the default behaviour, which is to preserves underscores."),Object(o.b)("h4",{parentName:"p"},"Usage Example: Override All Names"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention: lower-case#lowerCase\n")),Object(o.b)("h4",{parentName:"p"},"Usage Example: Upper-case enum values"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    enumValues: upper-case#upperCase\n")),Object(o.b)("h4",{parentName:"p"},"Usage Example: Keep"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention: keep\n")),Object(o.b)("h4",{parentName:"p"},"Usage Example: Remove Underscores"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    transformUnderscore: true\n")),Object(o.b)("h3",{parentName:"p"},"typesPrefix (",Object(o.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},'""'),")"),Object(o.b)("p",{parentName:"p"},"Prefixes all the generated types."),Object(o.b)("h4",{parentName:"p"},'Usage Example: Add "I" Prefix'),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  typesPrefix: I\n")),Object(o.b)("h3",{parentName:"p"},"skipTypename (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",{parentName:"p"},"Does not add __typename to the generated types, unless it was specified in the selection set."),Object(o.b)("h4",{parentName:"p"},"Usage Example"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  skipTypename: true\n")),Object(o.b)("h3",{parentName:"p"},"nonOptionalTypename (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",{parentName:"p"},"Automatically adds ",Object(o.b)("inlineCode",{parentName:"p"},"__typename")," field to the generated types, even when they are not specified in the selection set, and makes it non-optional"),Object(o.b)("h4",{parentName:"p"},"Usage Example"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  nonOptionalTypename: true\n"))),Object(o.b)("p",null,Object(o.b)("h3",{parentName:"p"},"gqlImport (",Object(o.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"gql#graphql-tag"),")"),Object(o.b)("p",{parentName:"p"},"Customize from which module will ",Object(o.b)("inlineCode",{parentName:"p"},"gql")," be imported from. This is useful if you want to use modules other than ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-tag"),", e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"graphql.macro"),"."),Object(o.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  gqlImport: graphql.macro#gql\n")),Object(o.b)("h4",{parentName:"p"},"Usage Example: Gatsby"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  gqlImport: gatsby#graphql\n")),Object(o.b)("h3",{parentName:"p"},"operationResultSuffix (",Object(o.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},'""'),")"),Object(o.b)("p",{parentName:"p"},"Adds a suffix to generated operation result type names"),Object(o.b)("h3",{parentName:"p"},"dedupeOperationSuffix (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",{parentName:"p"},"Set this configuration to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," if you wish to make sure to remove duplicate operation name suffix."),Object(o.b)("h3",{parentName:"p"},"omitOperationSuffix (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",{parentName:"p"},"Set this configuration to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," if you wish to disable auto add suffix of operation name, like ",Object(o.b)("inlineCode",{parentName:"p"},"Query"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Mutation"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Subscription"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Fragment"),"."),Object(o.b)("h3",{parentName:"p"},"documentMode (",Object(o.b)("inlineCode",{parentName:"h3"},"'graphQLTag' | 'documentNode' | 'documentNodeImportFragments' | 'external'"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"'graphQLTag'"),")"),Object(o.b)("p",{parentName:"p"},"Declares how DocumentNode are created: - ",Object(o.b)("inlineCode",{parentName:"p"},"graphQLTag"),": ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-tag")," or other modules (check ",Object(o.b)("inlineCode",{parentName:"p"},"gqlImport"),") will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client - ",Object(o.b)("inlineCode",{parentName:"p"},"documentNode"),": document nodes will be generated as objects when we generate the templates. - ",Object(o.b)("inlineCode",{parentName:"p"},"documentNodeImportFragments"),": Similar to documentNode except it imports external fragments instead of embedding them. - ",Object(o.b)("inlineCode",{parentName:"p"},"external"),": document nodes are imported from an external file. To be used with ",Object(o.b)("inlineCode",{parentName:"p"},"importDocumentNodeExternallyFrom")),Object(o.b)("h3",{parentName:"p"},"importDocumentNodeExternallyFrom (",Object(o.b)("inlineCode",{parentName:"h3"},"string | 'near-operation-file'"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"''"),")"),Object(o.b)("p",{parentName:"p"},"This config should be used if ",Object(o.b)("inlineCode",{parentName:"p"},"documentMode")," is ",Object(o.b)("inlineCode",{parentName:"p"},"external"),". This has 2 usage: - any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-tag")," in a separate file and export the generated document - 'near-operation-file': This is a special mode that is intended to be used with ",Object(o.b)("inlineCode",{parentName:"p"},"near-operation-file")," preset to import document nodes from those files. If these files are ",Object(o.b)("inlineCode",{parentName:"p"},".graphql")," files, we make use of webpack loader."),Object(o.b)("h4",{parentName:"p"},"Usage Example"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  documentMode: external\n  importDocumentNodeExternallyFrom: path/to/document-node-file\n")),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  documentMode: external\n  importDocumentNodeExternallyFrom: near-operation-file\n"))))}b.isMDXComponent=!0},245:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p({},t,{},e)),n},s=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,u=s["".concat(i,".").concat(d)]||s[d]||m[d]||o;return n?r.a.createElement(u,p({ref:t},c,{components:n})):r.a.createElement(u,p({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);
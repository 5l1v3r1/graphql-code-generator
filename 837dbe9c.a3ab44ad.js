(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{189:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(1),l=t(10),o=(t(0),t(245)),i={},r={id:"generated-config/typescript",title:"typescript",description:"### avoidOptionals (`boolean`, default value: `false`)",source:"@site/docs/generated-config/typescript.md",permalink:"/docs/generated-config/typescript",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/generated-config/typescript.md"},s=[{value:"avoidOptionals (<code>boolean</code>, default value: <code>false</code>)",id:"avoidoptionals-boolean-default-value-false",children:[]},{value:"constEnums (<code>boolean</code>, default value: <code>false</code>)",id:"constenums-boolean-default-value-false",children:[]},{value:"enumsAsTypes (<code>boolean</code>, default value: <code>false</code>)",id:"enumsastypes-boolean-default-value-false",children:[]},{value:"futureProofEnums (<code>boolean</code>, default value: <code>false</code>)",id:"futureproofenums-boolean-default-value-false",children:[]},{value:"enumsAsConst (<code>boolean</code>, default value: <code>false</code>)",id:"enumsasconst-boolean-default-value-false",children:[]},{value:"onlyOperationTypes (<code>boolean</code>, default value: <code>false</code>)",id:"onlyoperationtypes-boolean-default-value-false",children:[]},{value:"immutableTypes (<code>boolean</code>, default value: <code>false</code>)",id:"immutabletypes-boolean-default-value-false",children:[]},{value:"maybeValue (<code>string</code>, default value: <code>T | null</code>)",id:"maybevalue-string-default-value-t--null",children:[]},{value:"noExport (<code>boolean</code>, default value: <code>false</code>)",id:"noexport-boolean-default-value-false",children:[]}],c={rightToc:s};function p(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h3",{id:"avoidoptionals-boolean-default-value-false"},"avoidOptionals (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"This will cause the generator to avoid using TypeScript optionals (",Object(o.b)("inlineCode",{parentName:"p"},"?"),") on types, so the following definition: ",Object(o.b)("inlineCode",{parentName:"p"},"type A { myField: String }")," will output ",Object(o.b)("inlineCode",{parentName:"p"},"myField: Maybe<string>")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"myField?: Maybe<string>"),"."),Object(o.b)("h4",{id:"usage-example-override-all-definition-types"},"Usage Example: Override all definition types"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   avoidOptionals: true\n")),Object(o.b)("h4",{id:"usage-example-override-only-specific-definition-types"},"Usage Example: Override only specific definition types"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   avoidOptionals:\n     field: true\n     inputValue: true\n     object: true\n")),Object(o.b)("h3",{id:"constenums-boolean-default-value-false"},"constEnums (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"Will prefix every generated ",Object(o.b)("inlineCode",{parentName:"p"},"enum")," with ",Object(o.b)("inlineCode",{parentName:"p"},"const"),", you can read more about const enums ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/enums.html"}),"here"),"."),Object(o.b)("h4",{id:"usage-example"},"Usage Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   constEnums: true\n")),Object(o.b)("h3",{id:"enumsastypes-boolean-default-value-false"},"enumsAsTypes (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"Generates enum as TypeScript ",Object(o.b)("inlineCode",{parentName:"p"},"type")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"enum"),". Useful it you wish to genereate ",Object(o.b)("inlineCode",{parentName:"p"},".d.ts")," declartion file instead of ",Object(o.b)("inlineCode",{parentName:"p"},".ts")),Object(o.b)("h4",{id:"usage-example-1"},"Usage Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   enumsAsTypes: true\n")),Object(o.b)("h3",{id:"futureproofenums-boolean-default-value-false"},"futureProofEnums (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"This option controls whether or not a catch-all entry is added to enum type definitions for values that may be added in the future. You also have to set ",Object(o.b)("inlineCode",{parentName:"p"},"enumsAsTypes")," to true if you wish to use this option. This is useful if you are using ",Object(o.b)("inlineCode",{parentName:"p"},"relay"),"."),Object(o.b)("h4",{id:"usage-example-2"},"Usage Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   enumsAsTypes: true\n   futureProofEnums: true\n")),Object(o.b)("h3",{id:"enumsasconst-boolean-default-value-false"},"enumsAsConst (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"Generates enum as TypeScript ",Object(o.b)("inlineCode",{parentName:"p"},"const assertions")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"enum"),". This can even be used to enable enum-like patterns in plain JavaScript code if you choose not to use TypeScript\u2019s enum construct."),Object(o.b)("h4",{id:"usage-example-3"},"Usage Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   enumsAsConst: true\n")),Object(o.b)("h3",{id:"onlyoperationtypes-boolean-default-value-false"},"onlyOperationTypes (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"This will cause the generator to emit types for operations only (basically only enums and scalars). Interacts well with ",Object(o.b)("inlineCode",{parentName:"p"},"preResolveTypes: true")),Object(o.b)("h4",{id:"usage-example-override-all-definition-types-1"},"Usage Example: Override all definition types"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   onlyOperationTypes: true\n")),Object(o.b)("h3",{id:"immutabletypes-boolean-default-value-false"},"immutableTypes (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"Generates immutable types by adding ",Object(o.b)("inlineCode",{parentName:"p"},"readonly")," to properties and uses ",Object(o.b)("inlineCode",{parentName:"p"},"ReadonlyArray"),"."),Object(o.b)("h4",{id:"usage-example-4"},"Usage Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   immutableTypes: true\n")),Object(o.b)("h3",{id:"maybevalue-string-default-value-t--null"},"maybeValue (",Object(o.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"T | null"),")"),Object(o.b)("p",null,"Allow to override the type value of ",Object(o.b)("inlineCode",{parentName:"p"},"Maybe"),"."),Object(o.b)("h4",{id:"usage-example-allow-undefined"},"Usage Example: Allow undefined"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\n path/to/file.ts:\n   plugins:\n     - typescript\n   config:\n     maybeValue: T | null | undefined\n")),Object(o.b)("h4",{id:"usage-example-allow-null-in-resolvers"},"Usage Example: Allow ",Object(o.b)("inlineCode",{parentName:"h4"},"null")," in resolvers:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\n path/to/file.ts:\n   plugins:\n     - typescript\n     - typescript-resolves\n   config:\n     maybeValue: 'T extends PromiseLike<infer U> ? Promise<U | null> : T | null'\n")),Object(o.b)("h3",{id:"noexport-boolean-default-value-false"},"noExport (",Object(o.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(o.b)("p",null,"Set the to ",Object(o.b)("inlineCode",{parentName:"p"},"true")," in order to generate output without ",Object(o.b)("inlineCode",{parentName:"p"},"export")," modifier. This is useful if you are generating ",Object(o.b)("inlineCode",{parentName:"p"},".d.ts")," file and want it to be globally available."),Object(o.b)("h4",{id:"usage-example-disable-all-export-from-a-file"},"Usage Example: Disable all export from a file"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n config:\n   noExport: true\n")))}p.isMDXComponent=!0},245:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return f}));var a=t(0),l=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),p=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r({},n,{},e)),t},u=function(e){var n=p(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,f=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return t?l.a.createElement(f,r({ref:n},c,{components:t})):l.a.createElement(f,r({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var c=2;c<o;c++)i[c]=t[c];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);
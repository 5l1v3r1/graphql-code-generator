(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var i=n(1),r=n(10),a=(n(0),n(240)),o={id:"typescript-mongodb",title:"TypeScript MongoDB"},l={id:"plugins/typescript-mongodb",title:"TypeScript MongoDB",description:"This plugin generates TypeScript types for MongoDB models, which makes it relevant for server-side development only. It uses GraphQL directives to declare the types you want to generate and use in your MongoDB backend.",source:"@site/docs/plugins/typescript-mongodb.md",permalink:"/docs/plugins/typescript-mongodb",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-mongodb.md",sidebar:"sidebar",previous:{title:"TypeScript document nodes",permalink:"/docs/plugins/typescript-document-nodes"},next:{title:"TypeScript React Apollo",permalink:"/docs/plugins/typescript-react-apollo"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Directives",id:"directives",children:[]},{value:"Example",id:"example",children:[]},{value:"Configuration",id:"configuration",children:[]}],p={rightToc:c};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(i.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This plugin generates TypeScript types for MongoDB models, which makes it relevant for server-side development only. It uses GraphQL directives to declare the types you want to generate and use in your MongoDB backend."),Object(a.b)("p",null,"Given the following GraphQL declaration:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"type User @entity {\n    id: String @id\n    username: String! @column\n    email: @column\n}\n")),Object(a.b)("p",null,"We can have the following TypeScript output:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import { ObjectID } from 'mongodb';\n\nexport interface UserDbObject {\n  _id: ObjectID;\n  username: string;\n  email?: string | null;\n}\n")),Object(a.b)("p",null,"This interface can be used for db read/write purposes, thus making communication with the db much more consistent."),Object(a.b)("h2",{id:"installation"},"Installation"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{}),"$ yarn add @graphql-codegen/typescript-mongodb\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Don't install this plugin as devDependency, because you need to import the directives from it.")),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"Once installed, add the directives declaration to your GraphQL Schema definition:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import { makeExecutableSchema } from 'graphql-tools';\nimport { DIRECTIVES } from '@graphql-codegen/typescript-mongodb';\n\nconst schema = makeExecutableSchema({\n  typeDefs: [\n    DIRECTIVES,\n    // the rest of your GraphQL types\n  ],\n  resolvers,\n});\n")),Object(a.b)("p",null,"And generate code using ",Object(a.b)("inlineCode",{parentName:"p"},"gql-gen"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-yaml"}),"schema: ./src/my-schema.js\nrequire:\n  - ts-node/register\ngenerates:\n  ./src/generated/graphql.ts:\n    plugins:\n      - typescript\n      - typescript-mongodb\n")),Object(a.b)("p",null,"At this point, you can add the directives to your GraphQL definitions, and generate your MongoDB models file."),Object(a.b)("h2",{id:"directives"},"Directives"),Object(a.b)("h4",{id:"entityadditionalfields-additionalentityfields-on-object"},Object(a.b)("inlineCode",{parentName:"h4"},"@entity(additionalFields: [AdditionalEntityFields])")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"OBJECT"),")"),Object(a.b)("p",null,"Use this directive to specify which GraphQL type should have generated MongoDB models."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"embedded: Boolean")," - use this option to declare target entity as child of a greater entity. For example, given the following structure ",Object(a.b)("inlineCode",{parentName:"li"},"{ _id: string, username: string, profile: { name: string }}"),", the GraphQL type ",Object(a.b)("inlineCode",{parentName:"li"},"Profile")," should be declared as embedded."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"additionalFields: [AdditionalEntityFields]")," - specify any additional fields that you would like to add to your MongoDB object, and are not a part of your public GraphQL schema.")),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),'type User @entity(additionalFields: [\n { path: "services.login.token", type: "string" }\n]) {\n id: String @id\n email: @column\n}\n')),Object(a.b)("h4",{id:"columnoverridetype-string-on-field_definition"},Object(a.b)("inlineCode",{parentName:"h4"},"@column(overrideType: String)")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"FIELD_DEFINITION"),")"),Object(a.b)("p",null,"Use this directive to declare a specific GraphQL field as part of your generated MongoDB type."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"overrideType: String")," - use this to override the type of the field; for example, if you store dates as ",Object(a.b)("inlineCode",{parentName:"li"},"Date")," but expose them as ",Object(a.b)("inlineCode",{parentName:"li"},"String"),".")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"\u26a0 If target property is an embedded entity, you should use ",Object(a.b)("inlineCode",{parentName:"p"},"@embedded")," instead.")),Object(a.b)("h4",{id:"id-on-field_definition"},Object(a.b)("inlineCode",{parentName:"h4"},"@id")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"FIELD_DEFINITION"),")"),Object(a.b)("p",null,"Use this directive on the filed that should be mapped to a MongoDB ",Object(a.b)("inlineCode",{parentName:"p"},"_id"),". By default, it should be the ",Object(a.b)("inlineCode",{parentName:"p"},"id")," field of the GraphQL ",Object(a.b)("inlineCode",{parentName:"p"},"type"),"."),Object(a.b)("h4",{id:"link-on-field_definition"},Object(a.b)("inlineCode",{parentName:"h4"},"@link")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"FIELD_DEFINITION"),")"),Object(a.b)("p",null,"Use this directive to declare that a specific field is a link to another type in another table. This will use the ",Object(a.b)("inlineCode",{parentName:"p"},"ObjectID")," type in the generated result."),Object(a.b)("h4",{id:"embedded-on-field_definition"},Object(a.b)("inlineCode",{parentName:"h4"},"@embedded")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"FIELD_DEFINITION"),")"),Object(a.b)("p",null,"use this option to declare target entity as child of a greater entity."),Object(a.b)("h4",{id:"mappath-string-on-field_definition"},Object(a.b)("inlineCode",{parentName:"h4"},"@map(path: String)")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"FIELD_DEFINITION"),")"),Object(a.b)("p",null,"Use this directive to override the path or the name of the target field. This would come in handy whenever we would like to create a more complex object structure in the database;\nfor example, if you wish to project a field as ",Object(a.b)("inlineCode",{parentName:"p"},"username")," on your schema, but store it as ",Object(a.b)("inlineCode",{parentName:"p"},"credentials.username")," in your DB.\nYou can either specify the name of the field, or a path to which will lead to its corresponding field in the DB."),Object(a.b)("p",null,"Given the following GraphQL schema:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),'type User @entity {\n  username: String @column @map(path: "credentials.username")\n}\n')),Object(a.b)("p",null,"The output should be:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"export interface UserDbObject {\n  credentials: {\n    username: string;\n  };\n}\n")),Object(a.b)("h4",{id:"abstractentitydiscriminatorfield-string-on-interface"},Object(a.b)("inlineCode",{parentName:"h4"},"@abstractEntity(discriminatorField: String!)")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"INTERFACE"),")"),Object(a.b)("p",null,"Use this directive on a GraphQL interface to mark it as a basis for other database types.\nThe ",Object(a.b)("inlineCode",{parentName:"p"},"discriminatorField")," argument is mandatory and will tell the generator what field name in the database determines what interface the target object is implementing."),Object(a.b)("p",null,"For example:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),'interface BaseNotification @abstractEntity(discriminatorField: "notificationType") {\n  id: ID! @id\n  createdAt: String! @column(overrideType: "Date")\n}\n\ntype TextNotification implements BaseNotification @entity {\n  id: ID!\n  createdAt: String!\n  content: String! @column\n}\n')),Object(a.b)("p",null,"This way, you will get:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"export interface BaseNotificationDbInterface {\n  notificationType: string;\n  _id: ObjectID;\n  createdAt: Date;\n}\n\nexport interface TextNotificationDbObject extends BaseNotificationDbInterface {\n  content: string;\n}\n")),Object(a.b)("h4",{id:"uniondiscriminatorfield-string-on-union"},Object(a.b)("inlineCode",{parentName:"h4"},"@union(discriminatorField: String)")," (on ",Object(a.b)("inlineCode",{parentName:"h4"},"UNION"),")"),Object(a.b)("p",null,"This directive is similar to ",Object(a.b)("inlineCode",{parentName:"p"},"@abstractEntity"),", but for unions (that don't necessarily have any common fields).\nThe ",Object(a.b)("inlineCode",{parentName:"p"},"discriminatorField")," argument is mandatory and will tell the generator what field name in the database determines what interface the target object is implementing."),Object(a.b)("p",null,"Given the following GraphQL schema:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),'type A @entity {\n  fieldA: String @column\n}\n\ntype B @entity {\n  fieldB: String @column\n}\n\nunion PossibleType @union(discriminatorField: "entityType") = A | B\n')),Object(a.b)("p",null,"The output should be:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"export interface ADbObject {\n  fieldA: string;\n}\n\nexport interface BDbObject {\n  fieldB: string;\n}\n\nexport type PossibleType = { entityType: string } & (ADbObject | BDbObject);\n")),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("p",null,"Given the following GraphQL types:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-graphql"}),"type User @entity {\n  id: String! @id\n  username: String! @column\n  email: String! @column\n  profile: Profile! @embedded\n  friendsCount: Int! # this field won't get a generated MongoDB field\n  friends: [User]! @link\n}\n\ntype Profile @entity(embedded: true) {\n  name: String! @column\n  age: Int! @column\n}\n")),Object(a.b)("p",null,"The generated MongoDB models should look like so:"),Object(a.b)("pre",null,Object(a.b)("code",Object(i.a)({parentName:"pre"},{className:"language-typescript"}),"import { ObjectID } from 'mongodb';\n\nexport interface UserDbObject {\n  _id: ObjectID;\n  username: string;\n  email: string;\n  profile: ProfileDbObject;\n  friends: ObjectID[];\n}\n\nexport interface ProfileDbObject {\n  name: string;\n  age: string;\n}\n")),Object(a.b)("h2",{id:"configuration"},"Configuration"),Object(a.b)("p",null,"{@import: ../docs/generated-config/base-visitor.md}\n{@import: ../docs/generated-config/typescript-mongodb.md}"))}d.isMDXComponent=!0},240:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var i=n(0),r=n.n(i);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),d=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},b=function(e){var t=d(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(i.forwardRef)((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=d(n),u=i,m=b["".concat(o,".").concat(u)]||b[u]||s[u]||a;return n?r.a.createElement(m,l({ref:t},p,{components:n})):r.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
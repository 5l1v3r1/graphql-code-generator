(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{183:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(1),r=a(10),p=(a(0),a(244)),o={id:"typescript-apollo-angular",title:"TypeScript Apollo Angular"},i={id:"plugins/typescript-apollo-angular",title:"TypeScript Apollo Angular",description:"This plugin generates Apollo services (`Query`, `Mutation` and `Subscription`) with TypeScript typings.",source:"@site/docs/plugins/typescript-apollo-angular.md",permalink:"/docs/plugins/typescript-apollo-angular",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-apollo-angular.md",sidebar:"sidebar",previous:{title:"TypeScript Vue Apollo",permalink:"/docs/plugins/typescript-vue-apollo"},next:{title:"TypeScript Stencil Apollo",permalink:"/docs/plugins/typescript-stencil-apollo"}},l=[{value:"Installation",id:"installation",children:[]},{value:"How to use?",id:"how-to-use",children:[]},{value:"Configuration",id:"configuration",children:[]}],c={rightToc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(p.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,"This plugin generates Apollo services (",Object(p.b)("inlineCode",{parentName:"p"},"Query"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Mutation")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Subscription"),") with TypeScript typings."),Object(p.b)("p",null,"It will generate a strongly typed Angular service for every defined query, mutation or subscription. The generated Angular services are ready to inject and use within your Angular component."),Object(p.b)("p",null,"To shed some more light regards this template, it's recommended to go through the ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"http://apollographql.com/docs/angular/basics/services.html"}),'"Query, Mutation, Subscription services"')," chapter of Apollo Angular docs and to read the ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://medium.com/the-guild/apollo-angular-code-generation-7903da1f8559"}),'"Code Generation with Apollo Angular"')," article."),Object(p.b)("p",null,Object(p.b)("h2",{parentName:"p"},"Requirements"),Object(p.b)("p",{parentName:"p"},"In order to use this package, please make sure that you have GraphQL operations set as ",Object(p.b)("inlineCode",{parentName:"p"},"documents: ...")," in your ",Object(p.b)("inlineCode",{parentName:"p"},"codegen.yml"),"."),Object(p.b)("p",{parentName:"p"},"Without loading your GraphQL operations (query, mutation, subscription and fragment), you won't see any change in the generated output.")),Object(p.b)("h2",{id:"installation"},"Installation"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{}),"$ yarn add -D @graphql-codegen/typescript-apollo-angular\n")),Object(p.b)("h2",{id:"how-to-use"},"How to use?"),Object(p.b)("p",null,"Simply create a ",Object(p.b)("inlineCode",{parentName:"p"},".graphql")," file and write a random query like so:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),"query MyFeed {\n  feed {\n    id\n    commentCount\n  }\n}\n")),Object(p.b)("p",null,"Using ",Object(p.b)("inlineCode",{parentName:"p"},"graphql-codegen")," you can generate a file with typesand services that you can use when coding an Angular component:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yaml"}),"# ...\ngenerates:\n  path/to/output.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - typescript-apollo-angular\n")),Object(p.b)("p",null,"Then, use it:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import { MyFeedGQL, Feed } from './graphql';\n\n@Component({\n  selector: 'feed',\n  template: `\n    <h1>Feed:</h1>\n    <ul>\n      <li *ngFor=\"let item of feed | async\">{{ item.id }}</li>\n    </ul>\n  `,\n})\nexport class FeedComponent {\n  feed: Observable<Feed[]>;\n\n  constructor(feedGQL: MyFeedGQL) {\n    this.feed = feedGQL.watch().valueChanges.pipe(map(result => result.data.feed));\n  }\n}\n")),Object(p.b)("h4",{id:"ngmodule-directive"},Object(p.b)("inlineCode",{parentName:"h4"},"@NgModule")," directive"),Object(p.b)("p",null,"All generated services are defined with ",Object(p.b)("inlineCode",{parentName:"p"},"@Injectable({ providedIn: 'root' })")," and in most cases you don't need to overwrite it, because providing a service to the root injector is highly recommended. To customize that behavior you can use ",Object(p.b)("inlineCode",{parentName:"p"},"@NgModule")," directive, anywhere in an operation, to let the codegen know which injector should it use to create a service."),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"You can't use multiple ",Object(p.b)("inlineCode",{parentName:"p"},"@NgModule")," directives in the same operation")),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),'query feed {\n  feed @NgModule(module: "./feed/feed.module#FeedModule") {\n    id\n    title\n  }\n}\n')),Object(p.b)("h4",{id:"namedclient-directive"},Object(p.b)("inlineCode",{parentName:"h4"},"@namedClient")," directive"),Object(p.b)("p",null,"Sometimes you end up with multiple Apollo clients, which means part of operations can't use the defauls. In order to customize that behavior you simply attach the ",Object(p.b)("inlineCode",{parentName:"p"},"@namedClient")," directive and the ",Object(p.b)("inlineCode",{parentName:"p"},"typescript-apollo-angular")," plugin takes care of the rest."),Object(p.b)("blockquote",null,Object(p.b)("p",{parentName:"blockquote"},"You can't use multiple ",Object(p.b)("inlineCode",{parentName:"p"},"@namedClient")," directives in the same operation")),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-graphql"}),'query feed {\n  feed @namedClient(name: "custom") {\n    id\n    title\n  }\n}\n')),Object(p.b)("h2",{id:"configuration"},"Configuration"),Object(p.b)("p",null,Object(p.b)("h3",{parentName:"p"},"scalars (",Object(p.b)("inlineCode",{parentName:"h3"},"ScalarsMap"),")"),Object(p.b)("p",{parentName:"p"},"Extends or overrides the built-in scalars and custom GraphQL scalars to a custom type."),Object(p.b)("h4",{parentName:"p"},"Usage Example"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),'config:\n  scalars:\n    DateTime: Date\n    JSON: "{ [key: string]: any }"\n')),Object(p.b)("h3",{parentName:"p"},"namingConvention (",Object(p.b)("inlineCode",{parentName:"h3"},"NamingConvention"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"pascal-case#pascalCase"),")"),Object(p.b)("p",{parentName:"p"},"Allow you to override the naming convention of the output. You can either override all namings, or specify an object with specific custom naming convention per output. The format of the converter must be a valid ",Object(p.b)("inlineCode",{parentName:"p"},"module#method"),". Allowed values for specific output are: ",Object(p.b)("inlineCode",{parentName:"p"},"typeNames"),", ",Object(p.b)("inlineCode",{parentName:"p"},"enumValues"),'. You can also use "keep" to keep all GraphQL names as-is. Additionally you can set ',Object(p.b)("inlineCode",{parentName:"p"},"transformUnderscore")," to ",Object(p.b)("inlineCode",{parentName:"p"},"true")," if you want to override the default behaviour, which is to preserves underscores."),Object(p.b)("h4",{parentName:"p"},"Usage Example: Override All Names"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention: lower-case#lowerCase\n")),Object(p.b)("h4",{parentName:"p"},"Usage Example: Upper-case enum values"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    enumValues: upper-case#upperCase\n")),Object(p.b)("h4",{parentName:"p"},"Usage Example: Keep"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention: keep\n")),Object(p.b)("h4",{parentName:"p"},"Usage Example: Remove Underscores"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namingConvention:\n    typeNames: pascal-case#pascalCase\n    transformUnderscore: true\n")),Object(p.b)("h3",{parentName:"p"},"typesPrefix (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},'""'),")"),Object(p.b)("p",{parentName:"p"},"Prefixes all the generated types."),Object(p.b)("h4",{parentName:"p"},'Usage Example: Add "I" Prefix'),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  typesPrefix: I\n")),Object(p.b)("h3",{parentName:"p"},"skipTypename (",Object(p.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(p.b)("p",{parentName:"p"},"Does not add __typename to the generated types, unless it was specified in the selection set."),Object(p.b)("h4",{parentName:"p"},"Usage Example"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  skipTypename: true\n")),Object(p.b)("h3",{parentName:"p"},"nonOptionalTypename (",Object(p.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(p.b)("p",{parentName:"p"},"Automatically adds ",Object(p.b)("inlineCode",{parentName:"p"},"__typename")," field to the generated types, even when they are not specified in the selection set, and makes it non-optional"),Object(p.b)("h4",{parentName:"p"},"Usage Example"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  nonOptionalTypename: true\n"))),Object(p.b)("p",null,Object(p.b)("h3",{parentName:"p"},"gqlImport (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"gql#graphql-tag"),")"),Object(p.b)("p",{parentName:"p"},"Customize from which module will ",Object(p.b)("inlineCode",{parentName:"p"},"gql")," be imported from. This is useful if you want to use modules other than ",Object(p.b)("inlineCode",{parentName:"p"},"graphql-tag"),", e.g. ",Object(p.b)("inlineCode",{parentName:"p"},"graphql.macro"),"."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  gqlImport: graphql.macro#gql\n")),Object(p.b)("h4",{parentName:"p"},"Usage Example: Gatsby"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  gqlImport: gatsby#graphql\n")),Object(p.b)("h3",{parentName:"p"},"operationResultSuffix (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},'""'),")"),Object(p.b)("p",{parentName:"p"},"Adds a suffix to generated operation result type names"),Object(p.b)("h3",{parentName:"p"},"dedupeOperationSuffix (",Object(p.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(p.b)("p",{parentName:"p"},"Set this configuration to ",Object(p.b)("inlineCode",{parentName:"p"},"true")," if you wish to make sure to remove duplicate operation name suffix."),Object(p.b)("h3",{parentName:"p"},"omitOperationSuffix (",Object(p.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(p.b)("p",{parentName:"p"},"Set this configuration to ",Object(p.b)("inlineCode",{parentName:"p"},"true")," if you wish to disable auto add suffix of operation name, like ",Object(p.b)("inlineCode",{parentName:"p"},"Query"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Mutation"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Subscription"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Fragment"),"."),Object(p.b)("h3",{parentName:"p"},"documentMode (",Object(p.b)("inlineCode",{parentName:"h3"},"'graphQLTag' | 'documentNode' | 'documentNodeImportFragments' | 'external'"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"'graphQLTag'"),")"),Object(p.b)("p",{parentName:"p"},"Declares how DocumentNode are created: - ",Object(p.b)("inlineCode",{parentName:"p"},"graphQLTag"),": ",Object(p.b)("inlineCode",{parentName:"p"},"graphql-tag")," or other modules (check ",Object(p.b)("inlineCode",{parentName:"p"},"gqlImport"),") will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client - ",Object(p.b)("inlineCode",{parentName:"p"},"documentNode"),": document nodes will be generated as objects when we generate the templates. - ",Object(p.b)("inlineCode",{parentName:"p"},"documentNodeImportFragments"),": Similar to documentNode except it imports external fragments instead of embedding them. - ",Object(p.b)("inlineCode",{parentName:"p"},"external"),": document nodes are imported from an external file. To be used with ",Object(p.b)("inlineCode",{parentName:"p"},"importDocumentNodeExternallyFrom")),Object(p.b)("h3",{parentName:"p"},"importDocumentNodeExternallyFrom (",Object(p.b)("inlineCode",{parentName:"h3"},"string | 'near-operation-file'"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"''"),")"),Object(p.b)("p",{parentName:"p"},"This config should be used if ",Object(p.b)("inlineCode",{parentName:"p"},"documentMode")," is ",Object(p.b)("inlineCode",{parentName:"p"},"external"),". This has 2 usage: - any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use ",Object(p.b)("inlineCode",{parentName:"p"},"graphql-tag")," in a separate file and export the generated document - 'near-operation-file': This is a special mode that is intended to be used with ",Object(p.b)("inlineCode",{parentName:"p"},"near-operation-file")," preset to import document nodes from those files. If these files are ",Object(p.b)("inlineCode",{parentName:"p"},".graphql")," files, we make use of webpack loader."),Object(p.b)("h4",{parentName:"p"},"Usage Example"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  documentMode: external\n  importDocumentNodeExternallyFrom: path/to/document-node-file\n")),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  documentMode: external\n  importDocumentNodeExternallyFrom: near-operation-file\n"))),Object(p.b)("p",null,Object(p.b)("h3",{parentName:"p"},"ngModule (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(p.b)("p",{parentName:"p"},"Allows to define ",Object(p.b)("inlineCode",{parentName:"p"},"ngModule")," as part of the plugin's config so it's globally available."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  ngModule: ./path/to/module#MyModule\n")),Object(p.b)("h3",{parentName:"p"},"namedClient (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(p.b)("p",{parentName:"p"},"Defined the global value of ",Object(p.b)("inlineCode",{parentName:"p"},"namedClient"),"."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  namedClient: 'customName'\n")),Object(p.b)("h3",{parentName:"p"},"serviceName (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(p.b)("p",{parentName:"p"},"Defined the global value of ",Object(p.b)("inlineCode",{parentName:"p"},"serviceName"),"."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  serviceName: 'MySDK'\n")),Object(p.b)("h3",{parentName:"p"},"serviceProvidedInRoot (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),")"),Object(p.b)("p",{parentName:"p"},"Defined the global value of ",Object(p.b)("inlineCode",{parentName:"p"},"serviceProvidedInRoot"),"."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  serviceProvidedInRoot: false\n")),Object(p.b)("h3",{parentName:"p"},"sdkClass (",Object(p.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(p.b)("p",{parentName:"p"},"Set to ",Object(p.b)("inlineCode",{parentName:"p"},"true")," in order to generate a SDK service class that uses all generated services."),Object(p.b)("h3",{parentName:"p"},"querySuffix (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"'GQL'"),")"),Object(p.b)("p",{parentName:"p"},"Allows to define a custom suffix for query operations."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  querySuffix: 'QueryService'\n")),Object(p.b)("h3",{parentName:"p"},"mutationSuffix (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"'GQL'"),")"),Object(p.b)("p",{parentName:"p"},"Allows to define a custom suffix for mutation operations."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  mutationSuffix: 'MutationService'\n")),Object(p.b)("h3",{parentName:"p"},"subscriptionSuffix (",Object(p.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(p.b)("inlineCode",{parentName:"h3"},"'GQL'"),")"),Object(p.b)("p",{parentName:"p"},"Allows to define a custom suffix for Subscription operations."),Object(p.b)("h4",{parentName:"p"},"Usage Example: graphql.macro"),Object(p.b)("pre",{parentName:"p"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),"config:\n  subscriptionSuffix: 'SubscriptionService'\n"))))}b.isMDXComponent=!0},244:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){p(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},m=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=b(a),d=n,u=m["".concat(o,".").concat(d)]||m[d]||s[d]||p;return a?r.a.createElement(u,i({ref:t},c,{components:a})):r.a.createElement(u,i({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,o=new Array(p);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<p;c++)o[c]=a[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{199:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(1),a=n(10),o=(n(0),n(249)),i={id:"named-operations-object",title:"Named Operations Object"},c={id:"plugins/named-operations-object",title:"Named Operations Object",description:"This plugin generates an object containing a list of all your GraphQL operations and fragments. This is useful if you are using Apollo-Client and wish to have type validation when you are using `refetchQueries`.",source:"@site/docs/plugins/named-operations-object.md",permalink:"/docs/plugins/named-operations-object",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/named-operations-object.md",sidebar:"sidebar",previous:{title:"TypeScript GraphQL-Request",permalink:"/docs/plugins/typescript-graphql-request"},next:{title:"Flow Types",permalink:"/docs/plugins/flow"}},p=[{value:"Installation",id:"installation",children:[]},{value:"How to use?",id:"how-to-use",children:[]},{value:"Configuration",id:"configuration",children:[]}],l={rightToc:p};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This plugin generates an object containing a list of all your GraphQL operations and fragments. This is useful if you are using Apollo-Client and wish to have type validation when you are using ",Object(o.b)("inlineCode",{parentName:"p"},"refetchQueries"),"."),Object(o.b)("p",null,"All operations and fragments are being exported by their name (so unnamed operations are being ignored), in the following structure:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"export const namedOperations = {\n  Query: [...],   \n  Mutation: [...],   \n  Subscription: [...],   \n  Fragment: [...],   \n}\n")),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"Install using ",Object(o.b)("inlineCode",{parentName:"p"},"yarn"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"$ yarn add -D @graphql-codegen/named-operations-object \n")),Object(o.b)("h2",{id:"how-to-use"},"How to use?"),Object(o.b)("p",null,"Include the plugin within your output (into an existing JS/TS file, or a new file), for example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"schema: YOUR_SCHEMA\ndocuments: YOUR_OPERATIONS\ngenerates:\n  ./types.ts:\n    plugins:\n      - typescript\n      - typescript-operations\n      - named-operations-object\n")),Object(o.b)("p",null,"Now, you should be able to import ",Object(o.b)("inlineCode",{parentName:"p"},"namedOperations")," from that file, and use the names within your code. For example, with Apollo Client, you can do:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"client\n  .mutate(\n    { ... },\n    // No more typos, and you get auto-completion and build time validation\n    { refetchQueries: [namedOperations.Query.myQuery] }\n  );\n")),Object(o.b)("h2",{id:"configuration"},"Configuration"),Object(o.b)("p",null,Object(o.b)("h3",{parentName:"p"},"identifierName (",Object(o.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(o.b)("inlineCode",{parentName:"h3"},"namedOperations"),")"),Object(o.b)("p",{parentName:"p"},"Allow you to customize the name of the exported identifier"),Object(o.b)("h4",{parentName:"p"},"Usage Example"),Object(o.b)("pre",{parentName:"p"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yml"}),"generates:\npath/to/file.ts:\n plugins:\n   - typescript\n   - typescript-named-operations-object\n config:\n   identifierName: ListAllOperations\n"))))}s.isMDXComponent=!0},249:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),s=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=s(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,m=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(m,c({ref:t},l,{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);
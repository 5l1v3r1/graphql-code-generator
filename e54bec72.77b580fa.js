(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{239:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return o})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return s}));var n=r(1),a=r(10),i=(r(0),r(249)),p={id:"typescript-graphql-files-modules",title:"TypeScript GraphQL Files Modules"},o={id:"plugins/typescript-graphql-files-modules",title:"TypeScript GraphQL Files Modules",description:"This plugin generates TypeScript typings for `.graphql` files containing GraphQL documents, which later on can be consumed using [`graphql-tag/loader`](https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader), and get type-check and type-safety for your imports. This means that any time you import objects from `.graphql` files, your IDE will provide auto-complete.",source:"@site/docs/plugins/typescript-graphql-files-modules.md",permalink:"/docs/plugins/typescript-graphql-files-modules",editUrl:"https://github.com/dotansimha/graphql-code-generator/edit/master/website/docs/plugins/typescript-graphql-files-modules.md",sidebar:"sidebar",previous:{title:"TypeScript Resolvers",permalink:"/docs/plugins/typescript-resolvers"},next:{title:"TypeScript document nodes",permalink:"/docs/plugins/typescript-document-nodes"}},l=[{value:"Pre-Requirements",id:"pre-requirements",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Example",id:"example",children:[]},{value:"Configuration",id:"configuration",children:[]}],c={rightToc:l};function s(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This plugin generates TypeScript typings for ",Object(i.b)("inlineCode",{parentName:"p"},".graphql")," files containing GraphQL documents, which later on can be consumed using ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader"}),Object(i.b)("inlineCode",{parentName:"a"},"graphql-tag/loader")),", and get type-check and type-safety for your imports. This means that any time you import objects from ",Object(i.b)("inlineCode",{parentName:"p"},".graphql")," files, your IDE will provide auto-complete."),Object(i.b)("p",null,"This plugin also handles ",Object(i.b)("inlineCode",{parentName:"p"},".graphql")," files containing multiple GraphQL documents, and name the imports according to the operation name."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"\u26a0 Fragments are not generated with named imports, only as default imports, due to ",Object(i.b)("inlineCode",{parentName:"p"},"graphql-tag/loader")," behavior.")),Object(i.b)("h2",{id:"pre-requirements"},"Pre-Requirements"),Object(i.b)("p",null,"To use this template, make sure you are using ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/apollographql/graphql-tag#webpack-preprocessing-with-graphql-tagloader"}),Object(i.b)("inlineCode",{parentName:"a"},"graphql-tag/loader"))," with Webpack."),Object(i.b)("h2",{id:"installation"},"Installation"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"$ yarn add -D @graphql-codegen/typescript-graphql-files-modules \n")),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"Given that you have a query named ",Object(i.b)("inlineCode",{parentName:"p"},"MyQuery")," in ",Object(i.b)("inlineCode",{parentName:"p"},"my-query.graphql")," file, this template will generate the following code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-typescript"}),"declare module '*/my-query.graphql' {\n  import { DocumentNode } from 'graphql';\n  const MyQuery: DocumentNode;\n\n  export { MyQuery };\n\n  export default defaultDocument;\n}\n")),Object(i.b)("p",null,"Accordingly, you can import the generated types and use it in your code:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import myQuery from './my-query.graphql';\n\n// OR\n\nimport { myQuery } from './my-query.graphql';\n")),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)("p",null,Object(i.b)("h3",{parentName:"p"},"modulePathPrefix (",Object(i.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(i.b)("inlineCode",{parentName:"h3"},"''"),")"),Object(i.b)("p",{parentName:"p"},"Allows specifying a module definiton path prefix to provide distinction between generated types."),Object(i.b)("h4",{parentName:"p"},"Usage Example"),Object(i.b)("pre",{parentName:"p"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-yml"}),'generates: src/api/user-service/queries.d.ts\n documents: src/api/user-service/queries.graphql\n plugins:\n   - typescript\n   - typescript-graphql-files-modules\n config:\n   # resulting module definition path glob: "*\\/api/user-service/queries.graphql"\n   modulePathPrefix: "/api/user-service/"\n')),Object(i.b)("h3",{parentName:"p"},"relativeToCwd (",Object(i.b)("inlineCode",{parentName:"h3"},"boolean"),", default value: ",Object(i.b)("inlineCode",{parentName:"h3"},"false"),")"),Object(i.b)("p",{parentName:"p"},"By default, only the filename is being used to generate TS module declarations. Setting this to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," will generate it with a full path based on the CWD."),Object(i.b)("h3",{parentName:"p"},"prefix (",Object(i.b)("inlineCode",{parentName:"h3"},"string"),", default value: ",Object(i.b)("inlineCode",{parentName:"h3"},"*"),")"),Object(i.b)("p",{parentName:"p"},"By default, a wildcard is being added as prefix, you can change that to a custom prefix")))}s.isMDXComponent=!0},249:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=a.a.createContext({}),s=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o({},t,{},e)),r},u=function(e){var t=s(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),b=n,m=u["".concat(p,".").concat(b)]||u[b]||d[b]||i;return r?a.a.createElement(m,o({ref:t},c,{components:r})):a.a.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,p=new Array(i);p[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,p[1]=o;for(var c=2;c<i;c++)p[c]=r[c];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);